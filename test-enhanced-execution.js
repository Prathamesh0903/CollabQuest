const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

// Test configuration
const SERVER_URL = 'http://localhost:5000';
const SESSION_ID = `test_session_${Date.now()}`;

// Helper function to create test files
function createTestFile(filename, content) {
  const testDir = path.join(__dirname, 'test-files');
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }
  const filePath = path.join(testDir, filename);
  fs.writeFileSync(filePath, content);
  return filePath;
}

// Test 1: Basic code execution
async function testBasicExecution() {
  console.log('\n=== Test 1: Basic Code Execution ===');
  
  try {
    const response = await fetch(`${SERVER_URL}/api/execute`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        language: 'python',
        code: 'print("Hello from basic execution!")\nprint("Current directory:", __import__("os").getcwd())',
        input: 'test input'
      })
    });

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Basic execution successful');
      console.log('STDOUT:', result.data.stdout);
      console.log('Execution time:', result.execution.duration_ms, 'ms');
    } else {
      console.log('‚ùå Basic execution failed:', result.error);
    }
  } catch (error) {
    console.log('‚ùå Basic execution error:', error.message);
  }
}

// Test 2: Code execution with files
async function testFileExecution() {
  console.log('\n=== Test 2: Code Execution with Files ===');
  
  try {
    // Create test files
    const inputFile = createTestFile('input.txt', 'Hello from input file!\nThis is test data.');
    const configFile = createTestFile('config.json', '{"name": "test", "value": 42}');
    
    const formData = new FormData();
    formData.append('language', 'python');
    formData.append('code', `
import os
import json

print("Files in directory:")
for file in os.listdir('.'):
    print(f"- {file}")

# Read input file
try:
    with open('input.txt', 'r') as f:
        content = f.read()
        print(f"\\nInput file content:\\n{content}")
except FileNotFoundError:
    print("No input.txt file found")

# Read config file
try:
    with open('config.json', 'r') as f:
        config = json.load(f)
        print(f"\\nConfig: {config}")
except FileNotFoundError:
    print("No config.json file found")

# Create output file
with open('output.txt', 'w') as f:
    f.write("This file was generated by the code execution!\\n")
    f.write(f"Processed at: {__import__('datetime').datetime.now()}")

print("\\nCreated output.txt")
`);
    formData.append('input', 'file processing input');
    formData.append('sessionId', SESSION_ID);
    formData.append('files', fs.createReadStream(inputFile));
    formData.append('files', fs.createReadStream(configFile));

    const response = await fetch(`${SERVER_URL}/api/execute/with-files`, {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ File execution successful');
      console.log('STDOUT:', result.data.stdout);
      console.log('Files uploaded:', result.execution.files_uploaded);
      console.log('Files generated:', result.execution.files_generated);
      
      if (result.data.generated_files) {
        console.log('Generated files:');
        result.data.generated_files.forEach(file => {
          console.log(`- ${file.name} (${file.size} bytes)`);
        });
      }
    } else {
      console.log('‚ùå File execution failed:', result.error);
    }
  } catch (error) {
    console.log('‚ùå File execution error:', error.message);
  }
}

// Test 3: Interactive execution
async function testInteractiveExecution() {
  console.log('\n=== Test 3: Interactive Execution ===');
  
  try {
    // Create interactive session
    const createResponse = await fetch(`${SERVER_URL}/api/execute/interactive`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        language: 'python',
        code: `
print("Interactive Calculator")
print("Enter 'quit' to exit")

while True:
    try:
        expression = input("Enter expression (e.g., 2 + 3): ")
        
        if expression.lower() == 'quit':
            print("Goodbye!")
            break
            
        result = eval(expression)
        print(f"Result: {result}")
        
    except Exception as e:
        print(f"Error: {e}")
`,
        sessionId: SESSION_ID
      })
    });

    const createResult = await createResponse.json();
    
    if (createResult.success) {
      console.log('‚úÖ Interactive session created');
      const sessionId = createResult.data.session_id;
      
      // Send inputs
      const inputs = ['2 + 3', '10 * 5', 'quit'];
      
      for (const input of inputs) {
        console.log(`\nSending input: "${input}"`);
        
        const inputResponse = await fetch(`${SERVER_URL}/api/execute/interactive/${sessionId}/input`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ input })
        });

        const inputResult = await inputResponse.json();
        
        if (inputResult.success) {
          console.log('Output:', inputResult.data.output);
        } else {
          console.log('‚ùå Input failed:', inputResult.error);
        }
        
        // Small delay between inputs
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      // Terminate session
      await fetch(`${SERVER_URL}/api/execute/interactive/${sessionId}`, {
        method: 'DELETE'
      });
      console.log('\n‚úÖ Session terminated');
      
    } else {
      console.log('‚ùå Interactive session creation failed:', createResult.error);
    }
  } catch (error) {
    console.log('‚ùå Interactive execution error:', error.message);
  }
}

// Test 4: File management
async function testFileManagement() {
  console.log('\n=== Test 4: File Management ===');
  
  try {
    // List files in session
    const listResponse = await fetch(`${SERVER_URL}/api/execute/files/${SESSION_ID}`);
    const listResult = await listResponse.json();
    
    if (listResult.success) {
      console.log('‚úÖ Files listed successfully');
      console.log('Files in session:');
      listResult.data.files.forEach(file => {
        console.log(`- ${file.name} (${file.size} bytes, modified: ${file.modified})`);
      });
      
      // Download a file if available
      if (listResult.data.files.length > 0) {
        const filename = listResult.data.files[0].name;
        console.log(`\nDownloading ${filename}...`);
        
        const downloadResponse = await fetch(`${SERVER_URL}/api/execute/files/${SESSION_ID}/${filename}`);
        
        if (downloadResponse.ok) {
          const content = await downloadResponse.text();
          console.log(`‚úÖ File downloaded successfully (${content.length} bytes)`);
          console.log('Content preview:', content.substring(0, 100) + '...');
        } else {
          console.log('‚ùå File download failed');
        }
      }
    } else {
      console.log('‚ùå File listing failed:', listResult.error);
    }
  } catch (error) {
    console.log('‚ùå File management error:', error.message);
  }
}

// Test 5: Health check
async function testHealthCheck() {
  console.log('\n=== Test 5: Health Check ===');
  
  try {
    const response = await fetch(`${SERVER_URL}/api/execute/health`);
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Health check successful');
      console.log('Status:', result.data.status);
      console.log('Services:', result.data.services);
      console.log('Uptime:', result.data.uptime, 'seconds');
    } else {
      console.log('‚ùå Health check failed:', result.error);
    }
  } catch (error) {
    console.log('‚ùå Health check error:', error.message);
  }
}

// Main test runner
async function runTests() {
  console.log('üöÄ Starting Enhanced Code Execution Tests');
  console.log('Server URL:', SERVER_URL);
  console.log('Session ID:', SESSION_ID);
  
  try {
    await testHealthCheck();
    await testBasicExecution();
    await testFileExecution();
    await testInteractiveExecution();
    await testFileManagement();
    
    console.log('\nüéâ All tests completed!');
  } catch (error) {
    console.log('\n‚ùå Test runner error:', error.message);
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  runTests();
}

module.exports = {
  testBasicExecution,
  testFileExecution,
  testInteractiveExecution,
  testFileManagement,
  testHealthCheck,
  runTests
};
